{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aryan_srivastava\\\\data\\\\personal project\\\\qr ordering\\\\qr-menu-frontend\\\\src\\\\components\\\\Admin.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Admin.css';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Admin() {\n  _s();\n  const navigate = useNavigate();\n  const [tables, setTables] = useState([]);\n  const [selectedTable, setSelectedTable] = useState(null);\n  const [orders, setOrders] = useState([]);\n  useEffect(() => {\n    axios.get('http://localhost:8084/api/admin/tables').then(response => setTables(response.data)).catch(error => console.error('Error fetching tables', error));\n  }, []);\n  const fetchOrders = tableId => {\n    axios.get(`http://localhost:8084/api/order/getOrders/${tableId}`).then(response => setOrders(response.data)).catch(error => console.error('Error fetching orders', error));\n  };\n  const handleTableClick = tableId => {\n    setSelectedTable(tableId);\n    fetchOrders(tableId);\n  };\n  const handleCheckout = async tableId => {\n    if (window.confirm('Are you sure you want to checkout and clear all orders for this table?')) {\n      try {\n        const response = await axios.delete(`http://localhost:8084/api/receipt/${tableId}/checkout`);\n        const receipt = response.data;\n        // Use receipt ID from the checkout response to navigate\n        navigate(`/receipt/${receipt.id}`, {\n          state: {\n            receipt\n          }\n        });\n      } catch (error) {\n        console.error('Error checking out', error);\n      }\n    }\n  };\n  const handleToggleServed = async order => {\n    if (!order.done) {\n      try {\n        // Assuming the API sets the order to \"done\" and returns the updated order\n        const response = await axios.post(`http://localhost:8084/api/order/${order.id}/isDone`);\n        if (response.status === 200) {\n          const updatedOrder = response.data;\n\n          // Update orders state\n          const updatedOrders = orders.map(ord => ord.id === order.id ? {\n            ...ord,\n            done: updatedOrder.done\n          } : ord);\n          setOrders(updatedOrders);\n        }\n      } catch (error) {\n        console.error('Failed to update order status', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tables-grid\",\n      children: tables.map(table => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleTableClick(table),\n        children: [\"Table ID: \", table]\n      }, table, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"orders-container\",\n      style: {\n        maxHeight: '70%',\n        overflowY: 'scroll'\n      },\n      children: [selectedTable && orders.length > 0 ? orders.map(order => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Order ID: \", order.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: order.orderItems.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [item.menuItemName, \" x \", item.quantity]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Served:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: order.done,\n              onChange: () => handleToggleServed(order),\n              disabled: order.done // Disables checkbox if already served\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)]\n        }, order.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleCheckout(selectedTable),\n          children: \"Checkout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No orders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 18\n      }, this), selectedTable && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleCheckout(selectedTable),\n        children: \"Checkout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(Admin, \"jnUMRTlfD3uItZ2T87c5SIaCB2k=\", false, function () {\n  return [useNavigate];\n});\n_c = Admin;\nexport default Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","Admin","_s","navigate","tables","setTables","selectedTable","setSelectedTable","orders","setOrders","get","then","response","data","catch","error","console","fetchOrders","tableId","handleTableClick","handleCheckout","window","confirm","delete","receipt","id","state","handleToggleServed","order","done","post","status","updatedOrder","updatedOrders","map","ord","children","fileName","_jsxFileName","lineNumber","columnNumber","className","table","onClick","style","maxHeight","overflowY","length","orderItems","item","menuItemName","quantity","type","checked","onChange","disabled","_c","$RefreshReg$"],"sources":["C:/Users/aryan_srivastava/data/personal project/qr ordering/qr-menu-frontend/src/components/Admin.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Admin.css';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Admin() {\r\n    const navigate = useNavigate();\r\n    const [tables, setTables] = useState([]);\r\n    const [selectedTable, setSelectedTable] = useState(null);\r\n    const [orders, setOrders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8084/api/admin/tables')\r\n            .then(response => setTables(response.data))\r\n            .catch(error => console.error('Error fetching tables', error));\r\n    }, []);\r\n\r\n    const fetchOrders = (tableId) => {\r\n        axios.get(`http://localhost:8084/api/order/getOrders/${tableId}`)\r\n            .then(response => setOrders(response.data))\r\n            .catch(error => console.error('Error fetching orders', error));\r\n    };\r\n\r\n    const handleTableClick = (tableId) => {\r\n        setSelectedTable(tableId);\r\n        fetchOrders(tableId);\r\n    };\r\n\r\n    const handleCheckout = async (tableId) => {\r\n        if (window.confirm('Are you sure you want to checkout and clear all orders for this table?')) {\r\n            try {\r\n                const response = await axios.delete(`http://localhost:8084/api/receipt/${tableId}/checkout`);\r\n                const receipt = response.data;\r\n                // Use receipt ID from the checkout response to navigate\r\n                navigate(`/receipt/${receipt.id}`, { state: { receipt } });\r\n            } catch (error) {\r\n                console.error('Error checking out', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleToggleServed = async (order) => {\r\n        if (!order.done) {\r\n            try {\r\n                // Assuming the API sets the order to \"done\" and returns the updated order\r\n                const response = await axios.post(`http://localhost:8084/api/order/${order.id}/isDone`);\r\n                if (response.status === 200) {\r\n                    const updatedOrder = response.data;\r\n\r\n                    // Update orders state\r\n                    const updatedOrders = orders.map(ord =>\r\n                        ord.id === order.id ? { ...ord, done: updatedOrder.done } : ord\r\n                    );\r\n                    setOrders(updatedOrders);\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to update order status', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Admin Dashboard</h2>\r\n            <div className=\"tables-grid\">\r\n                {tables.map(table => (\r\n                    <button key={table} onClick={() => handleTableClick(table)}>\r\n                        Table ID: {table}\r\n                    </button>\r\n                ))}\r\n            </div>\r\n            <div className=\"orders-container\" style={{ maxHeight: '70%', overflowY: 'scroll' }}>\r\n            {selectedTable && orders.length > 0 ? (\r\n                orders.map(order => (\r\n                    <div>\r\n                    <div key={order.id}>\r\n                        <p>Order ID: {order.id}</p>\r\n                        <div>\r\n                            {/* <h2>Table {order.tableId}</h2> */}\r\n                            <ul>\r\n                                {order.orderItems.map(item => (\r\n                                    <li key={item.id}>{item.menuItemName} x {item.quantity}</li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                        {/* <button className=\"served-button\" onClick={() => handleServed(order.id)}>✔ Served</button> */}\r\n                        <p>Served:\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={order.done}\r\n                                onChange={() => handleToggleServed(order)}\r\n                                disabled={order.done} // Disables checkbox if already served\r\n                            />\r\n                        </p>\r\n                        \r\n                    </div>\r\n                    <button onClick={() => handleCheckout(selectedTable)}>Checkout</button>\r\n                    </div>\r\n                ))\r\n                \r\n        \r\n             ) : (\r\n                 <p>No orders</p>\r\n             )}\r\n                {selectedTable && <button onClick={() => handleCheckout(selectedTable)}>Checkout</button>}\r\n            </div>\r\n{/*             \r\n            <div className=\"orders-container\" style={{ maxHeight: '70%', overflowY: 'scroll' }}>\r\n                {selectedTable && orders.length > 0 ? (\r\n                    orders.map(order => (\r\n                        <div key={order.id}>\r\n                            <p>Order ID: {order.id}</p>\r\n                            <ul>\r\n                                {order.orderItems.map(item => (\r\n                                    <li key={item.id}>{item.menuItemName} x {item.quantity}</li>\r\n                                ))}\r\n                            </ul>\r\n                            <button onClick={() => handleCheckout(selectedTable)}>Checkout</button>\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p>No orders</p>\r\n                )}\r\n            </div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Admin;\r\n\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;AACpB,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZC,KAAK,CAACa,GAAG,CAAC,wCAAwC,CAAC,CAC9CC,IAAI,CAACC,QAAQ,IAAIP,SAAS,CAACO,QAAQ,CAACC,IAAI,CAAC,CAAC,CAC1CC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;EACtE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,WAAW,GAAIC,OAAO,IAAK;IAC7BrB,KAAK,CAACa,GAAG,CAAC,6CAA6CQ,OAAO,EAAE,CAAC,CAC5DP,IAAI,CAACC,QAAQ,IAAIH,SAAS,CAACG,QAAQ,CAACC,IAAI,CAAC,CAAC,CAC1CC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;EACtE,CAAC;EAED,MAAMI,gBAAgB,GAAID,OAAO,IAAK;IAClCX,gBAAgB,CAACW,OAAO,CAAC;IACzBD,WAAW,CAACC,OAAO,CAAC;EACxB,CAAC;EAED,MAAME,cAAc,GAAG,MAAOF,OAAO,IAAK;IACtC,IAAIG,MAAM,CAACC,OAAO,CAAC,wEAAwE,CAAC,EAAE;MAC1F,IAAI;QACA,MAAMV,QAAQ,GAAG,MAAMf,KAAK,CAAC0B,MAAM,CAAC,qCAAqCL,OAAO,WAAW,CAAC;QAC5F,MAAMM,OAAO,GAAGZ,QAAQ,CAACC,IAAI;QAC7B;QACAV,QAAQ,CAAC,YAAYqB,OAAO,CAACC,EAAE,EAAE,EAAE;UAAEC,KAAK,EAAE;YAAEF;UAAQ;QAAE,CAAC,CAAC;MAC9D,CAAC,CAAC,OAAOT,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC9C;IACJ;EACJ,CAAC;EAED,MAAMY,kBAAkB,GAAG,MAAOC,KAAK,IAAK;IACxC,IAAI,CAACA,KAAK,CAACC,IAAI,EAAE;MACb,IAAI;QACA;QACA,MAAMjB,QAAQ,GAAG,MAAMf,KAAK,CAACiC,IAAI,CAAC,mCAAmCF,KAAK,CAACH,EAAE,SAAS,CAAC;QACvF,IAAIb,QAAQ,CAACmB,MAAM,KAAK,GAAG,EAAE;UACzB,MAAMC,YAAY,GAAGpB,QAAQ,CAACC,IAAI;;UAElC;UACA,MAAMoB,aAAa,GAAGzB,MAAM,CAAC0B,GAAG,CAACC,GAAG,IAChCA,GAAG,CAACV,EAAE,KAAKG,KAAK,CAACH,EAAE,GAAG;YAAE,GAAGU,GAAG;YAAEN,IAAI,EAAEG,YAAY,CAACH;UAAK,CAAC,GAAGM,GAChE,CAAC;UACD1B,SAAS,CAACwB,aAAa,CAAC;QAC5B;MACJ,CAAC,CAAC,OAAOlB,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACzD;IACJ;EACJ,CAAC;EAED,oBACIf,OAAA;IAAAoC,QAAA,gBACIpC,OAAA;MAAAoC,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBxC,OAAA;MAAKyC,SAAS,EAAC,aAAa;MAAAL,QAAA,EACvBhC,MAAM,CAAC8B,GAAG,CAACQ,KAAK,iBACb1C,OAAA;QAAoB2C,OAAO,EAAEA,CAAA,KAAMxB,gBAAgB,CAACuB,KAAK,CAAE;QAAAN,QAAA,GAAC,YAC9C,EAACM,KAAK;MAAA,GADPA,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACNxC,OAAA;MAAKyC,SAAS,EAAC,kBAAkB;MAACG,KAAK,EAAE;QAAEC,SAAS,EAAE,KAAK;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAV,QAAA,GAClF9B,aAAa,IAAIE,MAAM,CAACuC,MAAM,GAAG,CAAC,GAC/BvC,MAAM,CAAC0B,GAAG,CAACN,KAAK,iBACZ5B,OAAA;QAAAoC,QAAA,gBACApC,OAAA;UAAAoC,QAAA,gBACIpC,OAAA;YAAAoC,QAAA,GAAG,YAAU,EAACR,KAAK,CAACH,EAAE;UAAA;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC3BxC,OAAA;YAAAoC,QAAA,eAEIpC,OAAA;cAAAoC,QAAA,EACKR,KAAK,CAACoB,UAAU,CAACd,GAAG,CAACe,IAAI,iBACtBjD,OAAA;gBAAAoC,QAAA,GAAmBa,IAAI,CAACC,YAAY,EAAC,KAAG,EAACD,IAAI,CAACE,QAAQ;cAAA,GAA7CF,IAAI,CAACxB,EAAE;gBAAAY,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAA2C,CAC9D;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACF;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eAENxC,OAAA;YAAAoC,QAAA,GAAG,SACC,eAAApC,OAAA;cACIoD,IAAI,EAAC,UAAU;cACfC,OAAO,EAAEzB,KAAK,CAACC,IAAK;cACpByB,QAAQ,EAAEA,CAAA,KAAM3B,kBAAkB,CAACC,KAAK,CAAE;cAC1C2B,QAAQ,EAAE3B,KAAK,CAACC,IAAK,CAAC;YAAA;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACzB,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA,GAlBEZ,KAAK,CAACH,EAAE;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAoBb,CAAC,eACNxC,OAAA;UAAQ2C,OAAO,EAAEA,CAAA,KAAMvB,cAAc,CAACd,aAAa,CAAE;UAAA8B,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CACR,CAAC,gBAIDxC,OAAA;QAAAoC,QAAA,EAAG;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAClB,EACGlC,aAAa,iBAAIN,OAAA;QAAQ2C,OAAO,EAAEA,CAAA,KAAMvB,cAAc,CAACd,aAAa,CAAE;QAAA8B,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAmBL,CAAC;AAEd;AAACtC,EAAA,CAzHQD,KAAK;EAAA,QACOH,WAAW;AAAA;AAAA0D,EAAA,GADvBvD,KAAK;AA2Hd,eAAeA,KAAK;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}