{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aryan_srivastava\\\\data\\\\personal project\\\\qr ordering\\\\qr-menu-frontend\\\\src\\\\components\\\\AllOrders.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './AllOrders.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllOrders() {\n  _s();\n  // const [tables, setTables] = useState([]);\n  // const [selectedTable, setSelectedTable] = useState(null);\n  const [orders, setOrders] = useState([]);\n  useEffect(() => {\n    axios.get('http://localhost:8084/api/order/getAllOrders').then(response => setOrders(response.data)).catch(error => console.error('Error fetching tables', error));\n  }, []);\n\n  // const fetchOrders = (tableId) => {\n  //     axios.get(`http://localhost:8084/api/order/getOrders/${tableId}`)\n  //         .then(response => setOrders(response.data))\n  //         .catch(error => console.error('Error fetching orders', error));\n  // };\n\n  // const handleTableClick = (tableId) => {\n  //     setSelectedTable(tableId);\n  //     fetchOrders(tableId);\n  // };\n\n  // const handleCheckout = (tableId) => {\n  //     if (window.confirm('Are you sure you want to checkout and clear all orders for this table?')) {\n  //         axios.delete(`http://localhost:8084/api/order/${tableId}`)\n  //             .then(() => {\n  //                 fetchOrders(tableId); // Refresh orders which should be empty now\n  //                 alert('Checked out successfully.');\n  //             })\n  //             .catch(error => console.error('Error checking out', error));\n  //     }\n  // };\n\n  const handleToggleServed = async order => {\n    if (!order.done) {\n      try {\n        // Assuming the API sets the order to \"done\" and returns the updated order\n        const response = await axios.post(`http://localhost:8084/api/order/${order.id}/isDone`);\n        if (response.status === 200) {\n          const updatedOrder = response.data;\n\n          // Update orders state\n          const updatedOrders = orders.map(ord => ord.id === order.id ? {\n            ...ord,\n            done: updatedOrder.done\n          } : ord);\n          setOrders(updatedOrders);\n        }\n      } catch (error) {\n        console.error('Failed to update order status', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Unserved Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"orders-container\",\n      style: {\n        maxHeight: '70%',\n        overflowY: 'scroll'\n      },\n      children: orders.map(order => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Order ID: \", order.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Table No: \", order.tableId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: order.orderItems.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [item.menuItemName, \" x \", item.quantity]\n            }, item.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Served:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: order.done,\n            onChange: () => handleToggleServed(order),\n            disabled: order.done // Disables checkbox if already served\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this)]\n      }, order.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n_s(AllOrders, \"FvMuVccH6DXI6fqfhJiN/VsjZaw=\");\n_c = AllOrders;\nexport default AllOrders;\nvar _c;\n$RefreshReg$(_c, \"AllOrders\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","AllOrders","_s","orders","setOrders","get","then","response","data","catch","error","console","handleToggleServed","order","done","post","id","status","updatedOrder","updatedOrders","map","ord","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","maxHeight","overflowY","tableId","orderItems","item","menuItemName","quantity","type","checked","onChange","disabled","_c","$RefreshReg$"],"sources":["C:/Users/aryan_srivastava/data/personal project/qr ordering/qr-menu-frontend/src/components/AllOrders.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './AllOrders.css';\r\n\r\nfunction AllOrders() {\r\n    // const [tables, setTables] = useState([]);\r\n    // const [selectedTable, setSelectedTable] = useState(null);\r\n    const [orders, setOrders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        axios.get('http://localhost:8084/api/order/getAllOrders')\r\n            .then(response => setOrders(response.data))\r\n            .catch(error => console.error('Error fetching tables', error));\r\n    }, []);\r\n\r\n    // const fetchOrders = (tableId) => {\r\n    //     axios.get(`http://localhost:8084/api/order/getOrders/${tableId}`)\r\n    //         .then(response => setOrders(response.data))\r\n    //         .catch(error => console.error('Error fetching orders', error));\r\n    // };\r\n\r\n    // const handleTableClick = (tableId) => {\r\n    //     setSelectedTable(tableId);\r\n    //     fetchOrders(tableId);\r\n    // };\r\n\r\n    // const handleCheckout = (tableId) => {\r\n    //     if (window.confirm('Are you sure you want to checkout and clear all orders for this table?')) {\r\n    //         axios.delete(`http://localhost:8084/api/order/${tableId}`)\r\n    //             .then(() => {\r\n    //                 fetchOrders(tableId); // Refresh orders which should be empty now\r\n    //                 alert('Checked out successfully.');\r\n    //             })\r\n    //             .catch(error => console.error('Error checking out', error));\r\n    //     }\r\n    // };\r\n\r\n    const handleToggleServed = async (order) => {\r\n        if (!order.done) {\r\n            try {\r\n                // Assuming the API sets the order to \"done\" and returns the updated order\r\n                const response = await axios.post(`http://localhost:8084/api/order/${order.id}/isDone`);\r\n                if (response.status === 200) {\r\n                    const updatedOrder = response.data;\r\n\r\n                    // Update orders state\r\n                    const updatedOrders = orders.map(ord =>\r\n                        ord.id === order.id ? { ...ord, done: updatedOrder.done } : ord\r\n                    );\r\n                    setOrders(updatedOrders);\r\n                }\r\n            } catch (error) {\r\n                console.error('Failed to update order status', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Admin Dashboard</h2>\r\n            <h4>Unserved Orders</h4>\r\n            \r\n            <div className=\"orders-container\" style={{ maxHeight: '70%', overflowY: 'scroll' }}>\r\n                {orders.map(order => (\r\n                    <div key={order.id}>\r\n                        <p>Order ID: {order.id}</p>\r\n                        <p>Table No: {order.tableId}</p>\r\n                        <div>\r\n                            {/* <h2>Table {order.tableId}</h2> */}\r\n                            <ul>\r\n                                {order.orderItems.map(item => (\r\n                                    <li key={item.id}>{item.menuItemName} x {item.quantity}</li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                        {/* <button className=\"served-button\" onClick={() => handleServed(order.id)}>âœ” Served</button> */}\r\n                        <p>Served:\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={order.done}\r\n                                onChange={() => handleToggleServed(order)}\r\n                                disabled={order.done} // Disables checkbox if already served\r\n                            />\r\n                        </p>\r\n                    </div>\r\n                ))}\r\n                {/* {selectedTable && <button onClick={() => handleCheckout(selectedTable)}>Checkout</button>} */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AllOrders;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}